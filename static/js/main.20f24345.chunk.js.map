{"version":3,"sources":["Header/Header.js","Utils.js","LeaderLadder/LeaderLadder.js","HomeContent/HomeContent.js","PageContent/PageContent.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","target","href","React","Component","KFACTOR","createPlayers","playerNames","matches","playerDict","forEach","playerName","ELO","wins","losses","match","Winner","Loser","adjustedELOS","aELO","bELO","didAWin","k","adjustedRatingA","Math","pow","adjustedRatingB","ELOCalc","Object","keys","map","name","sort","a","b","LeaderLadder","players","this","props","playerObject","index","key","round","HomeContent","src","PageContent","state","d3","then","setState","getContent","path","params","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.20f24345.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nclass Header extends React.Component {\n   \n    render () {\n        return (<div className=\"header\">\n            <div className=\"headerText\">Table tenniS Insights (TSI)</div>\n            <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1sF6K5eoTMGjo07zJKPZMnWw_B3yIk6WU5F6Ud56PVTs/edit?usp=sharing\">\n                <button>Record a match!</button>\n            </a>\n        </div>);\n    }\n}\n\nexport default Header;","const KFACTOR = 50;\n\nexport function createPlayers (playerNames, matches) {\n\n    let playerDict = {};\n    playerNames.forEach((playerName) => {\n        playerDict[playerName] = {\n            matches: [],\n            ELO: 1500,\n            wins: 0,\n            losses: 0\n        }\n    });\n\n\n    let ELOCalc = (aELO, bELO, didAWin, k) => {\n        let adjustedRatingA = Math.pow(10, aELO/400);\n        let adjustedRatingB = Math.pow(10, bELO/400);\n\n        let expectedScoreA =  adjustedRatingA / (adjustedRatingA + adjustedRatingB);\n        let expectedScoreB =  adjustedRatingB / (adjustedRatingA + adjustedRatingB);\n\n        let outcomeA = didAWin ? 1 : 0;\n        let outcomeB = didAWin ? 0 : 1;\n\n        return {\n            aELO: aELO + k * (outcomeA - expectedScoreA),\n            bELO: bELO + k * (outcomeB - expectedScoreB)\n        }\n    }\n\n    if (matches) {\n        matches.forEach((match) => {\n            if (match.Winner in playerDict && match.Loser in playerDict) {\n                playerDict[match.Winner].wins += 1;\n                playerDict[match.Loser].losses += 1;\n\n                let adjustedELOS = ELOCalc(playerDict[match.Winner].ELO, playerDict[match.Loser].ELO, true, KFACTOR);\n                playerDict[match.Winner].ELO = adjustedELOS.aELO;\n                playerDict[match.Loser].ELO = adjustedELOS.bELO;\n\n            }\n        });\n    }\n\n    return Object.keys(playerDict).map((playerName) => {\n        return {...playerDict[playerName], name: playerName};\n    }).sort((a, b) => {\n        if (a.ELO < b.ELO) {\n            return 1;\n        }\n        if (a.ELO > b.ELO) {\n            return -1;\n        }\n        return 0;\n    })\n}\n\n","import React from 'react';\nimport './LeaderLadder.css';\nimport { createPlayers } from '../Utils';\nimport * as d3 from 'd3';\n\nconst matchesLink = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vSBuLnOBXaX9mXTc08tcMnH5eLxt8VuLGf4a0SGouikhwKnfUxp6Kjo0hYa3QONBjfSS-oAEiL3TXX9/pub?gid=0&single=true&output=csv'\n\nclass LeaderLadder extends React.Component {\n    constructor () {\n        super();\n        // this.state = {\n        //     matches: null\n        // }\n    }\n\n    // componentDidMount () {\n    //     d3.csv(matchesLink).then((matches) => {\n    //         this.setState({matches: matches})\n    //     });\n    // }\n\n    render () {\n        // console.log(Utils.createPlayers(['Irem', 'Ben', 'Nick', 'Matt']));\n        let players = createPlayers(this.props.players, this.props.matches);\n        return (\n            <div className=\"leaderLadder\">\n                <div className=\"leaderLadderHeader\">\n                    Leader Ladder\n                </div>\n                <table><tbody>\n                    <tr className=\"headerRow\">\n                        <th></th>\n                        <th>Name</th>\n                        <th>Rating</th>\n                        <th>Record</th>\n                    </tr>\n                    {players.map((playerObject, index) =>\n                        <tr key={index}>\n                            <td>{index + 1}</td>\n                            <td>{playerObject.name}</td>\n                            <td>{Math.round(playerObject.ELO)}</td>\n                            <td>{playerObject.wins + ' - ' + playerObject.losses}</td>\n                    </tr>)}\n                </tbody></table>\n            </div>\n        );\n    }\n}\n\nexport default LeaderLadder;","import React from 'react';\nimport './HomeContent.css';\n\nclass HomeContent extends React.Component {\n   \n    render () {\n        return (<div className=\"homeContent\">\n        <div className=\"greetingText\">\n            <h3>Welcome to the TSI table tennis website!</h3>\n            <p>Use this page to check on rankings and any information about past or future tournaments</p>\n        </div>\n            <div className=\"contentBox\">\n                <div className=\"contentHeader\">\n                    Update 1 - TSI's first tournament, Ben's dominance\n                </div>\n                <div className=\"contentMain\">\n                    August 23rd 2019 marked the first TSI tournament. Strong showings by Sai and Matt were stifled by an absolutely dominant performance from Ben, who claimed victory with relative ease.\n                </div>\n                <div className=\"contentPhotoContainer\">\n                    <img src='/images/Tournament1Outcome.JPG'></img>\n                </div>\n            </div>  \n        </div>);\n    }\n}\n\nexport default HomeContent;","import React from 'react';\nimport './PageContent.css';\nimport LeaderLadder from './../LeaderLadder/LeaderLadder.js';\nimport HomeContent from './../HomeContent/HomeContent.js';\nimport * as d3 from 'd3';\n\nconst matchesLink = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vSBuLnOBXaX9mXTc08tcMnH5eLxt8VuLGf4a0SGouikhwKnfUxp6Kjo0hYa3QONBjfSS-oAEiL3TXX9/pub?gid=0&single=true&output=csv'\n\nclass PageContent extends React.Component {\n\n    constructor () {\n        super();\n        this.state = {\n            matches: [],\n            players: ['Irem', 'Nick', 'Matt', 'Karthik', 'Ben', 'Ellick']\n        }\n    }\n\n    componentDidMount () {\n        d3.csv(matchesLink).then((matches) => {\n            this.setState({matches: matches});\n        });\n    }\n   \n    render () {\n        return (\n            <div className=\"pageContent\">\n                {this.getContent(this.props.path, this.props.params)}\n            </div>  \n        );\n    }\n\n    getContent (path = 'home', params = null) {\n        if (path === 'home') {\n            return (<div className=\"homePageLayout\">\n                <HomeContent/>\n                <LeaderLadder players={this.state.players} matches={this.state.matches}/>\n            </div>);\n        }\n        return <div></div>\n    }\n}\n\nexport default PageContent;","import React from 'react';\nimport './App.css';\nimport Header from './Header/Header.js';\nimport PageContent from './PageContent/PageContent.js';\n\nclass App extends React.Component {\n\n  render () { return  (\n    <div className=\"App\">\n      <Header/>\n      <PageContent path='home'/>\n    </div>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}